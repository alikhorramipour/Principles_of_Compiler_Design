Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     program -> MAIN LRB RRB block
Rule 3     declist -> dec
Rule 4     declist -> declist dec
Rule 5     dec -> vardec
Rule 6     dec -> funcdec
Rule 7     type -> INTEGER
Rule 8     type -> FLOAT
Rule 9     type -> BOOLEAN
Rule 10    iddec -> ID
Rule 11    iddec -> ID LSB exp RSB
Rule 12    iddec -> assign
Rule 13    idlist -> iddec
Rule 14    idlist -> idlist COMMA iddec
Rule 15    vardec -> idlist COLON type SEMICOLON
Rule 16    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 17    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 18    paramdecs -> paramdecslist
Rule 19    paramdecs -> <empty>
Rule 20    paramdecslist -> paramdec
Rule 21    paramdecslist -> paramdecslist COMMA paramdec
Rule 22    paramdec -> ID COLON type
Rule 23    paramdec -> ID LSB RSB COLON type
Rule 24    block -> LCB stmtlist RCB
Rule 25    block -> LCB RCB
Rule 26    stmtlist -> stmt
Rule 27    stmtlist -> stmtlist stmt
Rule 28    lvalue -> ID
Rule 29    lvalue -> ID LSB exp RSB
Rule 30    case -> WHERE const COLON stmtlist
Rule 31    cases -> case
Rule 32    cases -> cases case
Rule 33    stmt -> RETURN exp SEMICOLON
Rule 34    stmt -> exp SEMICOLON
Rule 35    stmt -> block
Rule 36    stmt -> vardec
Rule 37    stmt -> WHILE LRB exp RRB stmt
Rule 38    stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 39    stmt -> ON LRB exp RRB LCB RCB SEMICOLON
Rule 40    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 41    stmt -> FOR LRB ID IN ID RRB stmt
Rule 42    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 43    stmt -> IF LRB exp RRB stmt elseiflist
Rule 44    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 45    elseiflist -> elseiflist ELSEIF LRB exp RRB stmt
Rule 46    elseiflist -> <empty>
Rule 47    exp -> assign
Rule 48    exp -> exp SUM exp
Rule 49    exp -> exp SUB exp
Rule 50    exp -> exp MUL exp
Rule 51    exp -> exp DIV exp
Rule 52    exp -> exp MOD exp
Rule 53    exp -> exp GT exp
Rule 54    exp -> exp LT exp
Rule 55    exp -> exp LE exp
Rule 56    exp -> exp GE exp
Rule 57    exp -> exp EQ exp
Rule 58    exp -> exp NE exp
Rule 59    exp -> const
Rule 60    exp -> lvalue
Rule 61    exp -> ID LRB explist RRB
Rule 62    exp -> LRB exp RRB
Rule 63    exp -> ID LRB RRB
Rule 64    exp -> SUB exp
Rule 65    exp -> NOT exp
Rule 66    assign -> lvalue ASSIGN exp
Rule 67    operator -> AND
Rule 68    operator -> OR
Rule 69    const -> INTEGERNUMBER
Rule 70    const -> FLOATNUMBER
Rule 71    const -> TRUE
Rule 72    const -> FALSE
Rule 73    explist -> exp
Rule 74    explist -> explist COMMA exp

Terminals, with rules where they appear

AND                  : 67
ASSIGN               : 66
BOOLEAN              : 9
COLON                : 15 16 22 23 30
COMMA                : 14 21 74
DIV                  : 51
ELSE                 : 44
ELSEIF               : 45
EQ                   : 57
ERROR                : 
FALSE                : 72
FLOAT                : 8
FLOATNUMBER          : 70
FOR                  : 40 41
FUNCTION             : 16 17
GE                   : 56
GT                   : 53
ID                   : 10 11 16 17 22 23 28 29 41 41 42 61 63
IF                   : 43 44
IN                   : 41
INTEGER              : 7
INTEGERNUMBER        : 69
LCB                  : 24 25 38 39
LE                   : 55
LRB                  : 1 2 16 17 37 38 39 40 41 42 43 44 45 61 62 63
LSB                  : 11 23 29
LT                   : 54
MAIN                 : 1 2
MOD                  : 52
MUL                  : 50
NE                   : 58
NOT                  : 65
ON                   : 38 39
OR                   : 68
PRINT                : 42
RCB                  : 24 25 38 39
RETURN               : 33
RRB                  : 1 2 16 17 37 38 39 40 41 42 43 44 45 61 62 63
RSB                  : 11 23 29
SEMICOLON            : 15 33 34 38 39 40 40 42
SUB                  : 49 64
SUM                  : 48
TRUE                 : 71
WHERE                : 30
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

assign               : 12 47
block                : 1 2 16 17 35
case                 : 31 32
cases                : 32 38
const                : 30 59
dec                  : 3 4
declist              : 1 4
elseiflist           : 43 44 45
exp                  : 11 29 33 34 37 38 39 40 40 40 43 44 45 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 62 64 65 66 73 74
explist              : 61 74
funcdec              : 6
iddec                : 13 14
idlist               : 14 15
lvalue               : 60 66
operator             : 
paramdec             : 20 21
paramdecs            : 16 17
paramdecslist        : 18 21
program              : 0
stmt                 : 26 27 37 40 41 43 44 44 45
stmtlist             : 24 27 30
type                 : 15 16 22 23
vardec               : 5 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) program -> . MAIN LRB RRB block
    (3) declist -> . dec
    (4) declist -> . declist dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign
    (66) assign -> . lvalue ASSIGN exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    MAIN            shift and go to state 3
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    program                        shift and go to state 1
    declist                        shift and go to state 2
    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10
    assign                         shift and go to state 11
    lvalue                         shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (4) declist -> declist . dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign
    (66) assign -> . lvalue ASSIGN exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    MAIN            shift and go to state 13
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    dec                            shift and go to state 14
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10
    assign                         shift and go to state 11
    lvalue                         shift and go to state 12

state 3

    (2) program -> MAIN . LRB RRB block

    LRB             shift and go to state 15


state 4

    (3) declist -> dec .

    MAIN            reduce using rule 3 (declist -> dec .)
    FUNCTION        reduce using rule 3 (declist -> dec .)
    ID              reduce using rule 3 (declist -> dec .)


state 5

    (5) dec -> vardec .

    MAIN            reduce using rule 5 (dec -> vardec .)
    FUNCTION        reduce using rule 5 (dec -> vardec .)
    ID              reduce using rule 5 (dec -> vardec .)


state 6

    (6) dec -> funcdec .

    MAIN            reduce using rule 6 (dec -> funcdec .)
    FUNCTION        reduce using rule 6 (dec -> funcdec .)
    ID              reduce using rule 6 (dec -> funcdec .)


state 7

    (15) vardec -> idlist . COLON type SEMICOLON
    (14) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 16
    COMMA           shift and go to state 17


state 8

    (16) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 18


state 9

    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB

    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)
    LSB             shift and go to state 19
    ASSIGN          reduce using rule 28 (lvalue -> ID .)


state 10

    (13) idlist -> iddec .

    COLON           reduce using rule 13 (idlist -> iddec .)
    COMMA           reduce using rule 13 (idlist -> iddec .)


state 11

    (12) iddec -> assign .

    COLON           reduce using rule 12 (iddec -> assign .)
    COMMA           reduce using rule 12 (iddec -> assign .)


state 12

    (66) assign -> lvalue . ASSIGN exp

    ASSIGN          shift and go to state 20


state 13

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 21


state 14

    (4) declist -> declist dec .

    MAIN            reduce using rule 4 (declist -> declist dec .)
    FUNCTION        reduce using rule 4 (declist -> declist dec .)
    ID              reduce using rule 4 (declist -> declist dec .)


state 15

    (2) program -> MAIN LRB . RRB block

    RRB             shift and go to state 22


state 16

    (15) vardec -> idlist COLON . type SEMICOLON
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    BOOLEAN         shift and go to state 26

    type                           shift and go to state 23

state 17

    (14) idlist -> idlist COMMA . iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign
    (66) assign -> . lvalue ASSIGN exp
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 9

    iddec                          shift and go to state 27
    assign                         shift and go to state 11
    lvalue                         shift and go to state 12

state 18

    (16) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 28


state 19

    (11) iddec -> ID LSB . exp RSB
    (29) lvalue -> ID LSB . exp RSB
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 30
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 20

    (66) assign -> lvalue ASSIGN . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    lvalue                         shift and go to state 34
    exp                            shift and go to state 41
    assign                         shift and go to state 31
    const                          shift and go to state 33

state 21

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 42


state 22

    (2) program -> MAIN LRB RRB . block
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB

    LCB             shift and go to state 44

    block                          shift and go to state 43

state 23

    (15) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 45


state 24

    (7) type -> INTEGER .

    SEMICOLON       reduce using rule 7 (type -> INTEGER .)
    COMMA           reduce using rule 7 (type -> INTEGER .)
    RRB             reduce using rule 7 (type -> INTEGER .)
    LCB             reduce using rule 7 (type -> INTEGER .)


state 25

    (8) type -> FLOAT .

    SEMICOLON       reduce using rule 8 (type -> FLOAT .)
    COMMA           reduce using rule 8 (type -> FLOAT .)
    RRB             reduce using rule 8 (type -> FLOAT .)
    LCB             reduce using rule 8 (type -> FLOAT .)


state 26

    (9) type -> BOOLEAN .

    SEMICOLON       reduce using rule 9 (type -> BOOLEAN .)
    COMMA           reduce using rule 9 (type -> BOOLEAN .)
    RRB             reduce using rule 9 (type -> BOOLEAN .)
    LCB             reduce using rule 9 (type -> BOOLEAN .)


state 27

    (14) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 14 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 14 (idlist -> idlist COMMA iddec .)


state 28

    (16) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (18) paramdecs -> . paramdecslist
    (19) paramdecs -> .
    (20) paramdecslist -> . paramdec
    (21) paramdecslist -> . paramdecslist COMMA paramdec
    (22) paramdec -> . ID COLON type
    (23) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 19 (paramdecs -> .)
    ID              shift and go to state 46

    paramdecs                      shift and go to state 47
    paramdecslist                  shift and go to state 48
    paramdec                       shift and go to state 49

state 29

    (61) exp -> ID . LRB explist RRB
    (63) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB

    LRB             shift and go to state 50
    ASSIGN          reduce using rule 28 (lvalue -> ID .)
    RSB             reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    COLON           reduce using rule 28 (lvalue -> ID .)
    COMMA           reduce using rule 28 (lvalue -> ID .)
    RRB             reduce using rule 28 (lvalue -> ID .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 51


state 30

    (11) iddec -> ID LSB exp . RSB
    (29) lvalue -> ID LSB exp . RSB
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             shift and go to state 52
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 31

    (47) exp -> assign .

    RSB             reduce using rule 47 (exp -> assign .)
    SUM             reduce using rule 47 (exp -> assign .)
    SUB             reduce using rule 47 (exp -> assign .)
    MUL             reduce using rule 47 (exp -> assign .)
    DIV             reduce using rule 47 (exp -> assign .)
    MOD             reduce using rule 47 (exp -> assign .)
    GT              reduce using rule 47 (exp -> assign .)
    LT              reduce using rule 47 (exp -> assign .)
    LE              reduce using rule 47 (exp -> assign .)
    GE              reduce using rule 47 (exp -> assign .)
    EQ              reduce using rule 47 (exp -> assign .)
    NE              reduce using rule 47 (exp -> assign .)
    COLON           reduce using rule 47 (exp -> assign .)
    COMMA           reduce using rule 47 (exp -> assign .)
    RRB             reduce using rule 47 (exp -> assign .)
    SEMICOLON       reduce using rule 47 (exp -> assign .)


state 32

    (64) exp -> SUB . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 64
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 33

    (59) exp -> const .

    RSB             reduce using rule 59 (exp -> const .)
    SUM             reduce using rule 59 (exp -> const .)
    SUB             reduce using rule 59 (exp -> const .)
    MUL             reduce using rule 59 (exp -> const .)
    DIV             reduce using rule 59 (exp -> const .)
    MOD             reduce using rule 59 (exp -> const .)
    GT              reduce using rule 59 (exp -> const .)
    LT              reduce using rule 59 (exp -> const .)
    LE              reduce using rule 59 (exp -> const .)
    GE              reduce using rule 59 (exp -> const .)
    EQ              reduce using rule 59 (exp -> const .)
    NE              reduce using rule 59 (exp -> const .)
    COLON           reduce using rule 59 (exp -> const .)
    COMMA           reduce using rule 59 (exp -> const .)
    RRB             reduce using rule 59 (exp -> const .)
    SEMICOLON       reduce using rule 59 (exp -> const .)


state 34

    (60) exp -> lvalue .
    (66) assign -> lvalue . ASSIGN exp

    RSB             reduce using rule 60 (exp -> lvalue .)
    SUM             reduce using rule 60 (exp -> lvalue .)
    SUB             reduce using rule 60 (exp -> lvalue .)
    MUL             reduce using rule 60 (exp -> lvalue .)
    DIV             reduce using rule 60 (exp -> lvalue .)
    MOD             reduce using rule 60 (exp -> lvalue .)
    GT              reduce using rule 60 (exp -> lvalue .)
    LT              reduce using rule 60 (exp -> lvalue .)
    LE              reduce using rule 60 (exp -> lvalue .)
    GE              reduce using rule 60 (exp -> lvalue .)
    EQ              reduce using rule 60 (exp -> lvalue .)
    NE              reduce using rule 60 (exp -> lvalue .)
    COLON           reduce using rule 60 (exp -> lvalue .)
    COMMA           reduce using rule 60 (exp -> lvalue .)
    RRB             reduce using rule 60 (exp -> lvalue .)
    SEMICOLON       reduce using rule 60 (exp -> lvalue .)
    ASSIGN          shift and go to state 20


state 35

    (62) exp -> LRB . exp RRB
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 65
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 36

    (65) exp -> NOT . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 66
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 37

    (69) const -> INTEGERNUMBER .

    RSB             reduce using rule 69 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 69 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 69 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 69 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 69 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 69 (const -> INTEGERNUMBER .)
    GT              reduce using rule 69 (const -> INTEGERNUMBER .)
    LT              reduce using rule 69 (const -> INTEGERNUMBER .)
    LE              reduce using rule 69 (const -> INTEGERNUMBER .)
    GE              reduce using rule 69 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 69 (const -> INTEGERNUMBER .)
    NE              reduce using rule 69 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 69 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 69 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 69 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 69 (const -> INTEGERNUMBER .)


state 38

    (70) const -> FLOATNUMBER .

    RSB             reduce using rule 70 (const -> FLOATNUMBER .)
    SUM             reduce using rule 70 (const -> FLOATNUMBER .)
    SUB             reduce using rule 70 (const -> FLOATNUMBER .)
    MUL             reduce using rule 70 (const -> FLOATNUMBER .)
    DIV             reduce using rule 70 (const -> FLOATNUMBER .)
    MOD             reduce using rule 70 (const -> FLOATNUMBER .)
    GT              reduce using rule 70 (const -> FLOATNUMBER .)
    LT              reduce using rule 70 (const -> FLOATNUMBER .)
    LE              reduce using rule 70 (const -> FLOATNUMBER .)
    GE              reduce using rule 70 (const -> FLOATNUMBER .)
    EQ              reduce using rule 70 (const -> FLOATNUMBER .)
    NE              reduce using rule 70 (const -> FLOATNUMBER .)
    COLON           reduce using rule 70 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 70 (const -> FLOATNUMBER .)
    RRB             reduce using rule 70 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 70 (const -> FLOATNUMBER .)


state 39

    (71) const -> TRUE .

    RSB             reduce using rule 71 (const -> TRUE .)
    SUM             reduce using rule 71 (const -> TRUE .)
    SUB             reduce using rule 71 (const -> TRUE .)
    MUL             reduce using rule 71 (const -> TRUE .)
    DIV             reduce using rule 71 (const -> TRUE .)
    MOD             reduce using rule 71 (const -> TRUE .)
    GT              reduce using rule 71 (const -> TRUE .)
    LT              reduce using rule 71 (const -> TRUE .)
    LE              reduce using rule 71 (const -> TRUE .)
    GE              reduce using rule 71 (const -> TRUE .)
    EQ              reduce using rule 71 (const -> TRUE .)
    NE              reduce using rule 71 (const -> TRUE .)
    COLON           reduce using rule 71 (const -> TRUE .)
    COMMA           reduce using rule 71 (const -> TRUE .)
    RRB             reduce using rule 71 (const -> TRUE .)
    SEMICOLON       reduce using rule 71 (const -> TRUE .)


state 40

    (72) const -> FALSE .

    RSB             reduce using rule 72 (const -> FALSE .)
    SUM             reduce using rule 72 (const -> FALSE .)
    SUB             reduce using rule 72 (const -> FALSE .)
    MUL             reduce using rule 72 (const -> FALSE .)
    DIV             reduce using rule 72 (const -> FALSE .)
    MOD             reduce using rule 72 (const -> FALSE .)
    GT              reduce using rule 72 (const -> FALSE .)
    LT              reduce using rule 72 (const -> FALSE .)
    LE              reduce using rule 72 (const -> FALSE .)
    GE              reduce using rule 72 (const -> FALSE .)
    EQ              reduce using rule 72 (const -> FALSE .)
    NE              reduce using rule 72 (const -> FALSE .)
    COLON           reduce using rule 72 (const -> FALSE .)
    COMMA           reduce using rule 72 (const -> FALSE .)
    RRB             reduce using rule 72 (const -> FALSE .)
    SEMICOLON       reduce using rule 72 (const -> FALSE .)


state 41

    (66) assign -> lvalue ASSIGN exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    COLON           reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    RSB             reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    GT              reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    LT              reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    LE              reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    GE              reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    EQ              reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    NE              reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    RRB             reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 66 (assign -> lvalue ASSIGN exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57

  ! SUM             [ reduce using rule 66 (assign -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 66 (assign -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 66 (assign -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 66 (assign -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 66 (assign -> lvalue ASSIGN exp .) ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 42

    (1) program -> declist MAIN LRB RRB . block
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB

    LCB             shift and go to state 44

    block                          shift and go to state 67

state 43

    (2) program -> MAIN LRB RRB block .

    $end            reduce using rule 2 (program -> MAIN LRB RRB block .)


state 44

    (24) block -> LCB . stmtlist RCB
    (25) block -> LCB . RCB
    (26) stmtlist -> . stmt
    (27) stmtlist -> . stmtlist stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RCB             shift and go to state 69
    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    stmtlist                       shift and go to state 68
    stmt                           shift and go to state 70
    exp                            shift and go to state 72
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 45

    (15) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)


state 46

    (22) paramdec -> ID . COLON type
    (23) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 82
    LSB             shift and go to state 83


state 47

    (16) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (17) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 84


state 48

    (18) paramdecs -> paramdecslist .
    (21) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 18 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 85


state 49

    (20) paramdecslist -> paramdec .

    COMMA           reduce using rule 20 (paramdecslist -> paramdec .)
    RRB             reduce using rule 20 (paramdecslist -> paramdec .)


state 50

    (61) exp -> ID LRB . explist RRB
    (63) exp -> ID LRB . RRB
    (73) explist -> . exp
    (74) explist -> . explist COMMA exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    RRB             shift and go to state 87
    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    explist                        shift and go to state 86
    exp                            shift and go to state 88
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 51

    (29) lvalue -> ID LSB . exp RSB
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 89
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 52

    (11) iddec -> ID LSB exp RSB .
    (29) lvalue -> ID LSB exp RSB .

    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    ASSIGN          reduce using rule 29 (lvalue -> ID LSB exp RSB .)


state 53

    (48) exp -> exp SUM . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 90
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 54

    (49) exp -> exp SUB . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 91
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 55

    (50) exp -> exp MUL . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 92
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 56

    (51) exp -> exp DIV . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 93
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 57

    (52) exp -> exp MOD . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 94
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 58

    (53) exp -> exp GT . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 95
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 59

    (54) exp -> exp LT . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 96
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 60

    (55) exp -> exp LE . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 97
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 61

    (56) exp -> exp GE . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 98
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 62

    (57) exp -> exp EQ . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 99
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 63

    (58) exp -> exp NE . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 100
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 64

    (64) exp -> SUB exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 64 (exp -> SUB exp .)
    SUM             reduce using rule 64 (exp -> SUB exp .)
    SUB             reduce using rule 64 (exp -> SUB exp .)
    MOD             reduce using rule 64 (exp -> SUB exp .)
    GT              reduce using rule 64 (exp -> SUB exp .)
    LT              reduce using rule 64 (exp -> SUB exp .)
    LE              reduce using rule 64 (exp -> SUB exp .)
    GE              reduce using rule 64 (exp -> SUB exp .)
    EQ              reduce using rule 64 (exp -> SUB exp .)
    NE              reduce using rule 64 (exp -> SUB exp .)
    COLON           reduce using rule 64 (exp -> SUB exp .)
    COMMA           reduce using rule 64 (exp -> SUB exp .)
    RRB             reduce using rule 64 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 64 (exp -> SUB exp .)
    MUL             shift and go to state 55
    DIV             shift and go to state 56

  ! MUL             [ reduce using rule 64 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 64 (exp -> SUB exp .) ]
  ! SUM             [ shift and go to state 53 ]
  ! SUB             [ shift and go to state 54 ]
  ! MOD             [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 65

    (62) exp -> LRB exp . RRB
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RRB             shift and go to state 101
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 66

    (65) exp -> NOT exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 65 (exp -> NOT exp .)
    COLON           reduce using rule 65 (exp -> NOT exp .)
    COMMA           reduce using rule 65 (exp -> NOT exp .)
    RRB             reduce using rule 65 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 65 (exp -> NOT exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63

  ! SUM             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! GT              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 65 (exp -> NOT exp .) ]


state 67

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 68

    (24) block -> LCB stmtlist . RCB
    (27) stmtlist -> stmtlist . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RCB             shift and go to state 102
    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    stmt                           shift and go to state 103
    exp                            shift and go to state 72
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 69

    (25) block -> LCB RCB .

    $end            reduce using rule 25 (block -> LCB RCB .)
    RCB             reduce using rule 25 (block -> LCB RCB .)
    RETURN          reduce using rule 25 (block -> LCB RCB .)
    WHILE           reduce using rule 25 (block -> LCB RCB .)
    ON              reduce using rule 25 (block -> LCB RCB .)
    FOR             reduce using rule 25 (block -> LCB RCB .)
    PRINT           reduce using rule 25 (block -> LCB RCB .)
    IF              reduce using rule 25 (block -> LCB RCB .)
    ID              reduce using rule 25 (block -> LCB RCB .)
    LRB             reduce using rule 25 (block -> LCB RCB .)
    SUB             reduce using rule 25 (block -> LCB RCB .)
    NOT             reduce using rule 25 (block -> LCB RCB .)
    LCB             reduce using rule 25 (block -> LCB RCB .)
    INTEGERNUMBER   reduce using rule 25 (block -> LCB RCB .)
    FLOATNUMBER     reduce using rule 25 (block -> LCB RCB .)
    TRUE            reduce using rule 25 (block -> LCB RCB .)
    FALSE           reduce using rule 25 (block -> LCB RCB .)
    MAIN            reduce using rule 25 (block -> LCB RCB .)
    FUNCTION        reduce using rule 25 (block -> LCB RCB .)
    ELSE            reduce using rule 25 (block -> LCB RCB .)
    ELSEIF          reduce using rule 25 (block -> LCB RCB .)
    WHERE           reduce using rule 25 (block -> LCB RCB .)


state 70

    (26) stmtlist -> stmt .

    RCB             reduce using rule 26 (stmtlist -> stmt .)
    RETURN          reduce using rule 26 (stmtlist -> stmt .)
    WHILE           reduce using rule 26 (stmtlist -> stmt .)
    ON              reduce using rule 26 (stmtlist -> stmt .)
    FOR             reduce using rule 26 (stmtlist -> stmt .)
    PRINT           reduce using rule 26 (stmtlist -> stmt .)
    IF              reduce using rule 26 (stmtlist -> stmt .)
    ID              reduce using rule 26 (stmtlist -> stmt .)
    LRB             reduce using rule 26 (stmtlist -> stmt .)
    SUB             reduce using rule 26 (stmtlist -> stmt .)
    NOT             reduce using rule 26 (stmtlist -> stmt .)
    LCB             reduce using rule 26 (stmtlist -> stmt .)
    INTEGERNUMBER   reduce using rule 26 (stmtlist -> stmt .)
    FLOATNUMBER     reduce using rule 26 (stmtlist -> stmt .)
    TRUE            reduce using rule 26 (stmtlist -> stmt .)
    FALSE           reduce using rule 26 (stmtlist -> stmt .)
    WHERE           reduce using rule 26 (stmtlist -> stmt .)


state 71

    (33) stmt -> RETURN . exp SEMICOLON
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 104
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 72

    (34) stmt -> exp . SEMICOLON
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    SEMICOLON       shift and go to state 105
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 73

    (35) stmt -> block .

    RCB             reduce using rule 35 (stmt -> block .)
    RETURN          reduce using rule 35 (stmt -> block .)
    WHILE           reduce using rule 35 (stmt -> block .)
    ON              reduce using rule 35 (stmt -> block .)
    FOR             reduce using rule 35 (stmt -> block .)
    PRINT           reduce using rule 35 (stmt -> block .)
    IF              reduce using rule 35 (stmt -> block .)
    ID              reduce using rule 35 (stmt -> block .)
    LRB             reduce using rule 35 (stmt -> block .)
    SUB             reduce using rule 35 (stmt -> block .)
    NOT             reduce using rule 35 (stmt -> block .)
    LCB             reduce using rule 35 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> block .)
    FLOATNUMBER     reduce using rule 35 (stmt -> block .)
    TRUE            reduce using rule 35 (stmt -> block .)
    FALSE           reduce using rule 35 (stmt -> block .)
    ELSE            reduce using rule 35 (stmt -> block .)
    ELSEIF          reduce using rule 35 (stmt -> block .)
    WHERE           reduce using rule 35 (stmt -> block .)


state 74

    (36) stmt -> vardec .

    RCB             reduce using rule 36 (stmt -> vardec .)
    RETURN          reduce using rule 36 (stmt -> vardec .)
    WHILE           reduce using rule 36 (stmt -> vardec .)
    ON              reduce using rule 36 (stmt -> vardec .)
    FOR             reduce using rule 36 (stmt -> vardec .)
    PRINT           reduce using rule 36 (stmt -> vardec .)
    IF              reduce using rule 36 (stmt -> vardec .)
    ID              reduce using rule 36 (stmt -> vardec .)
    LRB             reduce using rule 36 (stmt -> vardec .)
    SUB             reduce using rule 36 (stmt -> vardec .)
    NOT             reduce using rule 36 (stmt -> vardec .)
    LCB             reduce using rule 36 (stmt -> vardec .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> vardec .)
    FLOATNUMBER     reduce using rule 36 (stmt -> vardec .)
    TRUE            reduce using rule 36 (stmt -> vardec .)
    FALSE           reduce using rule 36 (stmt -> vardec .)
    ELSE            reduce using rule 36 (stmt -> vardec .)
    ELSEIF          reduce using rule 36 (stmt -> vardec .)
    WHERE           reduce using rule 36 (stmt -> vardec .)


state 75

    (37) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 106


state 76

    (38) stmt -> ON . LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> ON . LRB exp RRB LCB RCB SEMICOLON

    LRB             shift and go to state 107


state 77

    (40) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> FOR . LRB ID IN ID RRB stmt

    LRB             shift and go to state 108


state 78

    (61) exp -> ID . LRB explist RRB
    (63) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB
    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB

    LRB             shift and go to state 50
    ASSIGN          reduce using rule 28 (lvalue -> ID .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 109
    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)


state 79

    (42) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 110


state 80

    (43) stmt -> IF . LRB exp RRB stmt elseiflist
    (44) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt

    LRB             shift and go to state 111


state 81

    (47) exp -> assign .
    (12) iddec -> assign .

    SEMICOLON       reduce using rule 47 (exp -> assign .)
    SUM             reduce using rule 47 (exp -> assign .)
    SUB             reduce using rule 47 (exp -> assign .)
    MUL             reduce using rule 47 (exp -> assign .)
    DIV             reduce using rule 47 (exp -> assign .)
    MOD             reduce using rule 47 (exp -> assign .)
    GT              reduce using rule 47 (exp -> assign .)
    LT              reduce using rule 47 (exp -> assign .)
    LE              reduce using rule 47 (exp -> assign .)
    GE              reduce using rule 47 (exp -> assign .)
    EQ              reduce using rule 47 (exp -> assign .)
    NE              reduce using rule 47 (exp -> assign .)
    COLON           reduce using rule 12 (iddec -> assign .)
    COMMA           reduce using rule 12 (iddec -> assign .)


state 82

    (22) paramdec -> ID COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    BOOLEAN         shift and go to state 26

    type                           shift and go to state 112

state 83

    (23) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 113


state 84

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (17) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB

    COLON           shift and go to state 114
    LCB             shift and go to state 44

    block                          shift and go to state 115

state 85

    (21) paramdecslist -> paramdecslist COMMA . paramdec
    (22) paramdec -> . ID COLON type
    (23) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 46

    paramdec                       shift and go to state 116

state 86

    (61) exp -> ID LRB explist . RRB
    (74) explist -> explist . COMMA exp

    RRB             shift and go to state 117
    COMMA           shift and go to state 118


state 87

    (63) exp -> ID LRB RRB .

    RSB             reduce using rule 63 (exp -> ID LRB RRB .)
    SUM             reduce using rule 63 (exp -> ID LRB RRB .)
    SUB             reduce using rule 63 (exp -> ID LRB RRB .)
    MUL             reduce using rule 63 (exp -> ID LRB RRB .)
    DIV             reduce using rule 63 (exp -> ID LRB RRB .)
    MOD             reduce using rule 63 (exp -> ID LRB RRB .)
    GT              reduce using rule 63 (exp -> ID LRB RRB .)
    LT              reduce using rule 63 (exp -> ID LRB RRB .)
    LE              reduce using rule 63 (exp -> ID LRB RRB .)
    GE              reduce using rule 63 (exp -> ID LRB RRB .)
    EQ              reduce using rule 63 (exp -> ID LRB RRB .)
    NE              reduce using rule 63 (exp -> ID LRB RRB .)
    COLON           reduce using rule 63 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 63 (exp -> ID LRB RRB .)
    RRB             reduce using rule 63 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 63 (exp -> ID LRB RRB .)


state 88

    (73) explist -> exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RRB             reduce using rule 73 (explist -> exp .)
    COMMA           reduce using rule 73 (explist -> exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 89

    (29) lvalue -> ID LSB exp . RSB
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             shift and go to state 119
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 90

    (48) exp -> exp SUM exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 48 (exp -> exp SUM exp .)
    SUM             reduce using rule 48 (exp -> exp SUM exp .)
    SUB             reduce using rule 48 (exp -> exp SUM exp .)
    MOD             reduce using rule 48 (exp -> exp SUM exp .)
    GT              reduce using rule 48 (exp -> exp SUM exp .)
    LT              reduce using rule 48 (exp -> exp SUM exp .)
    LE              reduce using rule 48 (exp -> exp SUM exp .)
    GE              reduce using rule 48 (exp -> exp SUM exp .)
    EQ              reduce using rule 48 (exp -> exp SUM exp .)
    NE              reduce using rule 48 (exp -> exp SUM exp .)
    COLON           reduce using rule 48 (exp -> exp SUM exp .)
    COMMA           reduce using rule 48 (exp -> exp SUM exp .)
    RRB             reduce using rule 48 (exp -> exp SUM exp .)
    SEMICOLON       reduce using rule 48 (exp -> exp SUM exp .)
    MUL             shift and go to state 55
    DIV             shift and go to state 56

  ! MUL             [ reduce using rule 48 (exp -> exp SUM exp .) ]
  ! DIV             [ reduce using rule 48 (exp -> exp SUM exp .) ]
  ! SUM             [ shift and go to state 53 ]
  ! SUB             [ shift and go to state 54 ]
  ! MOD             [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 91

    (49) exp -> exp SUB exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 49 (exp -> exp SUB exp .)
    SUM             reduce using rule 49 (exp -> exp SUB exp .)
    SUB             reduce using rule 49 (exp -> exp SUB exp .)
    MOD             reduce using rule 49 (exp -> exp SUB exp .)
    GT              reduce using rule 49 (exp -> exp SUB exp .)
    LT              reduce using rule 49 (exp -> exp SUB exp .)
    LE              reduce using rule 49 (exp -> exp SUB exp .)
    GE              reduce using rule 49 (exp -> exp SUB exp .)
    EQ              reduce using rule 49 (exp -> exp SUB exp .)
    NE              reduce using rule 49 (exp -> exp SUB exp .)
    COLON           reduce using rule 49 (exp -> exp SUB exp .)
    COMMA           reduce using rule 49 (exp -> exp SUB exp .)
    RRB             reduce using rule 49 (exp -> exp SUB exp .)
    SEMICOLON       reduce using rule 49 (exp -> exp SUB exp .)
    MUL             shift and go to state 55
    DIV             shift and go to state 56

  ! MUL             [ reduce using rule 49 (exp -> exp SUB exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> exp SUB exp .) ]
  ! SUM             [ shift and go to state 53 ]
  ! SUB             [ shift and go to state 54 ]
  ! MOD             [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 92

    (50) exp -> exp MUL exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 50 (exp -> exp MUL exp .)
    SUM             reduce using rule 50 (exp -> exp MUL exp .)
    SUB             reduce using rule 50 (exp -> exp MUL exp .)
    MUL             reduce using rule 50 (exp -> exp MUL exp .)
    DIV             reduce using rule 50 (exp -> exp MUL exp .)
    MOD             reduce using rule 50 (exp -> exp MUL exp .)
    GT              reduce using rule 50 (exp -> exp MUL exp .)
    LT              reduce using rule 50 (exp -> exp MUL exp .)
    LE              reduce using rule 50 (exp -> exp MUL exp .)
    GE              reduce using rule 50 (exp -> exp MUL exp .)
    EQ              reduce using rule 50 (exp -> exp MUL exp .)
    NE              reduce using rule 50 (exp -> exp MUL exp .)
    COLON           reduce using rule 50 (exp -> exp MUL exp .)
    COMMA           reduce using rule 50 (exp -> exp MUL exp .)
    RRB             reduce using rule 50 (exp -> exp MUL exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp MUL exp .)

  ! SUM             [ shift and go to state 53 ]
  ! SUB             [ shift and go to state 54 ]
  ! MUL             [ shift and go to state 55 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 93

    (51) exp -> exp DIV exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 51 (exp -> exp DIV exp .)
    SUM             reduce using rule 51 (exp -> exp DIV exp .)
    SUB             reduce using rule 51 (exp -> exp DIV exp .)
    MUL             reduce using rule 51 (exp -> exp DIV exp .)
    DIV             reduce using rule 51 (exp -> exp DIV exp .)
    MOD             reduce using rule 51 (exp -> exp DIV exp .)
    GT              reduce using rule 51 (exp -> exp DIV exp .)
    LT              reduce using rule 51 (exp -> exp DIV exp .)
    LE              reduce using rule 51 (exp -> exp DIV exp .)
    GE              reduce using rule 51 (exp -> exp DIV exp .)
    EQ              reduce using rule 51 (exp -> exp DIV exp .)
    NE              reduce using rule 51 (exp -> exp DIV exp .)
    COLON           reduce using rule 51 (exp -> exp DIV exp .)
    COMMA           reduce using rule 51 (exp -> exp DIV exp .)
    RRB             reduce using rule 51 (exp -> exp DIV exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp DIV exp .)

  ! SUM             [ shift and go to state 53 ]
  ! SUB             [ shift and go to state 54 ]
  ! MUL             [ shift and go to state 55 ]
  ! DIV             [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 94

    (52) exp -> exp MOD exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 52 (exp -> exp MOD exp .)
    MOD             reduce using rule 52 (exp -> exp MOD exp .)
    GT              reduce using rule 52 (exp -> exp MOD exp .)
    LT              reduce using rule 52 (exp -> exp MOD exp .)
    LE              reduce using rule 52 (exp -> exp MOD exp .)
    GE              reduce using rule 52 (exp -> exp MOD exp .)
    EQ              reduce using rule 52 (exp -> exp MOD exp .)
    NE              reduce using rule 52 (exp -> exp MOD exp .)
    COLON           reduce using rule 52 (exp -> exp MOD exp .)
    COMMA           reduce using rule 52 (exp -> exp MOD exp .)
    RRB             reduce using rule 52 (exp -> exp MOD exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp MOD exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56

  ! SUM             [ reduce using rule 52 (exp -> exp MOD exp .) ]
  ! SUB             [ reduce using rule 52 (exp -> exp MOD exp .) ]
  ! MUL             [ reduce using rule 52 (exp -> exp MOD exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp MOD exp .) ]
  ! MOD             [ shift and go to state 57 ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 95

    (53) exp -> exp GT exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 53 (exp -> exp GT exp .)
    GT              reduce using rule 53 (exp -> exp GT exp .)
    LT              reduce using rule 53 (exp -> exp GT exp .)
    LE              reduce using rule 53 (exp -> exp GT exp .)
    GE              reduce using rule 53 (exp -> exp GT exp .)
    EQ              reduce using rule 53 (exp -> exp GT exp .)
    NE              reduce using rule 53 (exp -> exp GT exp .)
    COLON           reduce using rule 53 (exp -> exp GT exp .)
    COMMA           reduce using rule 53 (exp -> exp GT exp .)
    RRB             reduce using rule 53 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 53 (exp -> exp GT exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57

  ! SUM             [ reduce using rule 53 (exp -> exp GT exp .) ]
  ! SUB             [ reduce using rule 53 (exp -> exp GT exp .) ]
  ! MUL             [ reduce using rule 53 (exp -> exp GT exp .) ]
  ! DIV             [ reduce using rule 53 (exp -> exp GT exp .) ]
  ! MOD             [ reduce using rule 53 (exp -> exp GT exp .) ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 96

    (54) exp -> exp LT exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 54 (exp -> exp LT exp .)
    GT              reduce using rule 54 (exp -> exp LT exp .)
    LT              reduce using rule 54 (exp -> exp LT exp .)
    LE              reduce using rule 54 (exp -> exp LT exp .)
    GE              reduce using rule 54 (exp -> exp LT exp .)
    EQ              reduce using rule 54 (exp -> exp LT exp .)
    NE              reduce using rule 54 (exp -> exp LT exp .)
    COLON           reduce using rule 54 (exp -> exp LT exp .)
    COMMA           reduce using rule 54 (exp -> exp LT exp .)
    RRB             reduce using rule 54 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 54 (exp -> exp LT exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57

  ! SUM             [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! SUB             [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! MUL             [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! DIV             [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! MOD             [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 97

    (55) exp -> exp LE exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 55 (exp -> exp LE exp .)
    GT              reduce using rule 55 (exp -> exp LE exp .)
    LT              reduce using rule 55 (exp -> exp LE exp .)
    LE              reduce using rule 55 (exp -> exp LE exp .)
    GE              reduce using rule 55 (exp -> exp LE exp .)
    EQ              reduce using rule 55 (exp -> exp LE exp .)
    NE              reduce using rule 55 (exp -> exp LE exp .)
    COLON           reduce using rule 55 (exp -> exp LE exp .)
    COMMA           reduce using rule 55 (exp -> exp LE exp .)
    RRB             reduce using rule 55 (exp -> exp LE exp .)
    SEMICOLON       reduce using rule 55 (exp -> exp LE exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57

  ! SUM             [ reduce using rule 55 (exp -> exp LE exp .) ]
  ! SUB             [ reduce using rule 55 (exp -> exp LE exp .) ]
  ! MUL             [ reduce using rule 55 (exp -> exp LE exp .) ]
  ! DIV             [ reduce using rule 55 (exp -> exp LE exp .) ]
  ! MOD             [ reduce using rule 55 (exp -> exp LE exp .) ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 98

    (56) exp -> exp GE exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 56 (exp -> exp GE exp .)
    GT              reduce using rule 56 (exp -> exp GE exp .)
    LT              reduce using rule 56 (exp -> exp GE exp .)
    LE              reduce using rule 56 (exp -> exp GE exp .)
    GE              reduce using rule 56 (exp -> exp GE exp .)
    EQ              reduce using rule 56 (exp -> exp GE exp .)
    NE              reduce using rule 56 (exp -> exp GE exp .)
    COLON           reduce using rule 56 (exp -> exp GE exp .)
    COMMA           reduce using rule 56 (exp -> exp GE exp .)
    RRB             reduce using rule 56 (exp -> exp GE exp .)
    SEMICOLON       reduce using rule 56 (exp -> exp GE exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57

  ! SUM             [ reduce using rule 56 (exp -> exp GE exp .) ]
  ! SUB             [ reduce using rule 56 (exp -> exp GE exp .) ]
  ! MUL             [ reduce using rule 56 (exp -> exp GE exp .) ]
  ! DIV             [ reduce using rule 56 (exp -> exp GE exp .) ]
  ! MOD             [ reduce using rule 56 (exp -> exp GE exp .) ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 99

    (57) exp -> exp EQ exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 57 (exp -> exp EQ exp .)
    GT              reduce using rule 57 (exp -> exp EQ exp .)
    LT              reduce using rule 57 (exp -> exp EQ exp .)
    LE              reduce using rule 57 (exp -> exp EQ exp .)
    GE              reduce using rule 57 (exp -> exp EQ exp .)
    EQ              reduce using rule 57 (exp -> exp EQ exp .)
    NE              reduce using rule 57 (exp -> exp EQ exp .)
    COLON           reduce using rule 57 (exp -> exp EQ exp .)
    COMMA           reduce using rule 57 (exp -> exp EQ exp .)
    RRB             reduce using rule 57 (exp -> exp EQ exp .)
    SEMICOLON       reduce using rule 57 (exp -> exp EQ exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57

  ! SUM             [ reduce using rule 57 (exp -> exp EQ exp .) ]
  ! SUB             [ reduce using rule 57 (exp -> exp EQ exp .) ]
  ! MUL             [ reduce using rule 57 (exp -> exp EQ exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> exp EQ exp .) ]
  ! MOD             [ reduce using rule 57 (exp -> exp EQ exp .) ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 100

    (58) exp -> exp NE exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             reduce using rule 58 (exp -> exp NE exp .)
    GT              reduce using rule 58 (exp -> exp NE exp .)
    LT              reduce using rule 58 (exp -> exp NE exp .)
    LE              reduce using rule 58 (exp -> exp NE exp .)
    GE              reduce using rule 58 (exp -> exp NE exp .)
    EQ              reduce using rule 58 (exp -> exp NE exp .)
    NE              reduce using rule 58 (exp -> exp NE exp .)
    COLON           reduce using rule 58 (exp -> exp NE exp .)
    COMMA           reduce using rule 58 (exp -> exp NE exp .)
    RRB             reduce using rule 58 (exp -> exp NE exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp NE exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57

  ! SUM             [ reduce using rule 58 (exp -> exp NE exp .) ]
  ! SUB             [ reduce using rule 58 (exp -> exp NE exp .) ]
  ! MUL             [ reduce using rule 58 (exp -> exp NE exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> exp NE exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> exp NE exp .) ]
  ! GT              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! LE              [ shift and go to state 60 ]
  ! GE              [ shift and go to state 61 ]
  ! EQ              [ shift and go to state 62 ]
  ! NE              [ shift and go to state 63 ]


state 101

    (62) exp -> LRB exp RRB .

    RSB             reduce using rule 62 (exp -> LRB exp RRB .)
    SUM             reduce using rule 62 (exp -> LRB exp RRB .)
    SUB             reduce using rule 62 (exp -> LRB exp RRB .)
    MUL             reduce using rule 62 (exp -> LRB exp RRB .)
    DIV             reduce using rule 62 (exp -> LRB exp RRB .)
    MOD             reduce using rule 62 (exp -> LRB exp RRB .)
    GT              reduce using rule 62 (exp -> LRB exp RRB .)
    LT              reduce using rule 62 (exp -> LRB exp RRB .)
    LE              reduce using rule 62 (exp -> LRB exp RRB .)
    GE              reduce using rule 62 (exp -> LRB exp RRB .)
    EQ              reduce using rule 62 (exp -> LRB exp RRB .)
    NE              reduce using rule 62 (exp -> LRB exp RRB .)
    COLON           reduce using rule 62 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 62 (exp -> LRB exp RRB .)
    RRB             reduce using rule 62 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 62 (exp -> LRB exp RRB .)


state 102

    (24) block -> LCB stmtlist RCB .

    $end            reduce using rule 24 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 24 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 24 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 24 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 24 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 24 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 24 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 24 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 24 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 24 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 24 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 24 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 24 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 24 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 24 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 24 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 24 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 24 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 24 (block -> LCB stmtlist RCB .)


state 103

    (27) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 27 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 27 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 27 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 27 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 27 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 27 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 27 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 27 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 27 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 27 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 27 (stmtlist -> stmtlist stmt .)


state 104

    (33) stmt -> RETURN exp . SEMICOLON
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    SEMICOLON       shift and go to state 120
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 105

    (34) stmt -> exp SEMICOLON .

    RCB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 34 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 34 (stmt -> exp SEMICOLON .)
    ON              reduce using rule 34 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 34 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 34 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 34 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 34 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 34 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 34 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 34 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 34 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 34 (stmt -> exp SEMICOLON .)
    ELSEIF          reduce using rule 34 (stmt -> exp SEMICOLON .)
    WHERE           reduce using rule 34 (stmt -> exp SEMICOLON .)


state 106

    (37) stmt -> WHILE LRB . exp RRB stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 121
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 107

    (38) stmt -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> ON LRB . exp RRB LCB RCB SEMICOLON
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 122
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 108

    (40) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> FOR LRB . ID IN ID RRB stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 124
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 123
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 109

    (29) lvalue -> ID LSB . exp RSB
    (11) iddec -> ID LSB . exp RSB
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 125
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 110

    (42) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 126


state 111

    (43) stmt -> IF LRB . exp RRB stmt elseiflist
    (44) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 127
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 112

    (22) paramdec -> ID COLON type .

    COMMA           reduce using rule 22 (paramdec -> ID COLON type .)
    RRB             reduce using rule 22 (paramdec -> ID COLON type .)


state 113

    (23) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 128


state 114

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    BOOLEAN         shift and go to state 26

    type                           shift and go to state 129

state 115

    (17) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 17 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 116

    (21) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 21 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 21 (paramdecslist -> paramdecslist COMMA paramdec .)


state 117

    (61) exp -> ID LRB explist RRB .

    RSB             reduce using rule 61 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 61 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 61 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 61 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 61 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 61 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 61 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 61 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 61 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 61 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 61 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 61 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 61 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 61 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 61 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 61 (exp -> ID LRB explist RRB .)


state 118

    (74) explist -> explist COMMA . exp
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 130
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 119

    (29) lvalue -> ID LSB exp RSB .

    ASSIGN          reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 29 (lvalue -> ID LSB exp RSB .)


state 120

    (33) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ON              reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)


state 121

    (37) stmt -> WHILE LRB exp . RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RRB             shift and go to state 131
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 122

    (38) stmt -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (39) stmt -> ON LRB exp . RRB LCB RCB SEMICOLON
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RRB             shift and go to state 132
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 123

    (40) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    SEMICOLON       shift and go to state 133
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 124

    (41) stmt -> FOR LRB ID . IN ID RRB stmt
    (61) exp -> ID . LRB explist RRB
    (63) exp -> ID . LRB RRB
    (28) lvalue -> ID .
    (29) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 134
    LRB             shift and go to state 50
    ASSIGN          reduce using rule 28 (lvalue -> ID .)
    SEMICOLON       reduce using rule 28 (lvalue -> ID .)
    SUM             reduce using rule 28 (lvalue -> ID .)
    SUB             reduce using rule 28 (lvalue -> ID .)
    MUL             reduce using rule 28 (lvalue -> ID .)
    DIV             reduce using rule 28 (lvalue -> ID .)
    MOD             reduce using rule 28 (lvalue -> ID .)
    GT              reduce using rule 28 (lvalue -> ID .)
    LT              reduce using rule 28 (lvalue -> ID .)
    LE              reduce using rule 28 (lvalue -> ID .)
    GE              reduce using rule 28 (lvalue -> ID .)
    EQ              reduce using rule 28 (lvalue -> ID .)
    NE              reduce using rule 28 (lvalue -> ID .)
    LSB             shift and go to state 51


state 125

    (29) lvalue -> ID LSB exp . RSB
    (11) iddec -> ID LSB exp . RSB
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RSB             shift and go to state 135
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 126

    (42) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 136


state 127

    (43) stmt -> IF LRB exp . RRB stmt elseiflist
    (44) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RRB             shift and go to state 137
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 128

    (23) paramdec -> ID LSB RSB COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 24
    FLOAT           shift and go to state 25
    BOOLEAN         shift and go to state 26

    type                           shift and go to state 138

state 129

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB

    LCB             shift and go to state 44

    block                          shift and go to state 139

state 130

    (74) explist -> explist COMMA exp .
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RRB             reduce using rule 74 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 74 (explist -> explist COMMA exp .)
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 131

    (37) stmt -> WHILE LRB exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 72
    stmt                           shift and go to state 140
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 132

    (38) stmt -> ON LRB exp RRB . LCB cases RCB SEMICOLON
    (39) stmt -> ON LRB exp RRB . LCB RCB SEMICOLON

    LCB             shift and go to state 141


state 133

    (40) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 142
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 134

    (41) stmt -> FOR LRB ID IN . ID RRB stmt

    ID              shift and go to state 143


state 135

    (29) lvalue -> ID LSB exp RSB .
    (11) iddec -> ID LSB exp RSB .

    ASSIGN          reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 29 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 136

    (42) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 144


state 137

    (43) stmt -> IF LRB exp RRB . stmt elseiflist
    (44) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 72
    stmt                           shift and go to state 145
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 138

    (23) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 23 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 23 (paramdec -> ID LSB RSB COLON type .)


state 139

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 140

    (37) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ON              reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ELSEIF          reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    WHERE           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)


state 141

    (38) stmt -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (39) stmt -> ON LRB exp RRB LCB . RCB SEMICOLON
    (31) cases -> . case
    (32) cases -> . cases case
    (30) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 147
    WHERE           shift and go to state 149

    cases                          shift and go to state 146
    case                           shift and go to state 148

state 142

    (40) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    SEMICOLON       shift and go to state 150
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 143

    (41) stmt -> FOR LRB ID IN ID . RRB stmt

    RRB             shift and go to state 151


state 144

    (42) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 42 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 145

    (43) stmt -> IF LRB exp RRB stmt . elseiflist
    (44) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (45) elseiflist -> . elseiflist ELSEIF LRB exp RRB stmt
    (46) elseiflist -> .

    RCB             reduce using rule 46 (elseiflist -> .)
    RETURN          reduce using rule 46 (elseiflist -> .)
    WHILE           reduce using rule 46 (elseiflist -> .)
    ON              reduce using rule 46 (elseiflist -> .)
    FOR             reduce using rule 46 (elseiflist -> .)
    PRINT           reduce using rule 46 (elseiflist -> .)
    IF              reduce using rule 46 (elseiflist -> .)
    ID              reduce using rule 46 (elseiflist -> .)
    LRB             reduce using rule 46 (elseiflist -> .)
    SUB             reduce using rule 46 (elseiflist -> .)
    NOT             reduce using rule 46 (elseiflist -> .)
    LCB             reduce using rule 46 (elseiflist -> .)
    INTEGERNUMBER   reduce using rule 46 (elseiflist -> .)
    FLOATNUMBER     reduce using rule 46 (elseiflist -> .)
    TRUE            reduce using rule 46 (elseiflist -> .)
    FALSE           reduce using rule 46 (elseiflist -> .)
    ELSE            reduce using rule 46 (elseiflist -> .)
    ELSEIF          reduce using rule 46 (elseiflist -> .)
    WHERE           reduce using rule 46 (elseiflist -> .)

    elseiflist                     shift and go to state 152

state 146

    (38) stmt -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (32) cases -> cases . case
    (30) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 153
    WHERE           shift and go to state 149

    case                           shift and go to state 154

state 147

    (39) stmt -> ON LRB exp RRB LCB RCB . SEMICOLON

    SEMICOLON       shift and go to state 155


state 148

    (31) cases -> case .

    RCB             reduce using rule 31 (cases -> case .)
    WHERE           reduce using rule 31 (cases -> case .)


state 149

    (30) case -> WHERE . const COLON stmtlist
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE

    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    const                          shift and go to state 156

state 150

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 157
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 151

    (41) stmt -> FOR LRB ID IN ID RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    stmt                           shift and go to state 158
    exp                            shift and go to state 72
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 152

    (43) stmt -> IF LRB exp RRB stmt elseiflist .
    (44) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (45) elseiflist -> elseiflist . ELSEIF LRB exp RRB stmt

    RCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            shift and go to state 159
    ELSEIF          shift and go to state 160

  ! ELSE            [ reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .) ]
  ! ELSEIF          [ reduce using rule 43 (stmt -> IF LRB exp RRB stmt elseiflist .) ]


state 153

    (38) stmt -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 161


state 154

    (32) cases -> cases case .

    RCB             reduce using rule 32 (cases -> cases case .)
    WHERE           reduce using rule 32 (cases -> cases case .)


state 155

    (39) stmt -> ON LRB exp RRB LCB RCB SEMICOLON .

    RCB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    RETURN          reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    WHILE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ON              reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FOR             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    PRINT           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    IF              reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ID              reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    LRB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    SUB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    NOT             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    LCB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    TRUE            reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FALSE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ELSE            reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ELSEIF          reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    WHERE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)


state 156

    (30) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 162


state 157

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RRB             shift and go to state 163
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 158

    (41) stmt -> FOR LRB ID IN ID RRB stmt .

    RCB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    RETURN          reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHILE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ON              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FOR             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    PRINT           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    IF              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ID              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LRB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    SUB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    NOT             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LCB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    INTEGERNUMBER   reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FLOATNUMBER     reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    TRUE            reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FALSE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSE            reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSEIF          reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHERE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)


state 159

    (44) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 72
    stmt                           shift and go to state 164
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 160

    (45) elseiflist -> elseiflist ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 165


state 161

    (38) stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 162

    (30) case -> WHERE const COLON . stmtlist
    (26) stmtlist -> . stmt
    (27) stmtlist -> . stmtlist stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    const                          shift and go to state 33
    stmtlist                       shift and go to state 166
    stmt                           shift and go to state 70
    exp                            shift and go to state 72
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 163

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 72
    stmt                           shift and go to state 167
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 164

    (44) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ON              reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSEIF          reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHERE           reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 165

    (45) elseiflist -> elseiflist ELSEIF LRB . exp RRB stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 29
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 168
    assign                         shift and go to state 31
    const                          shift and go to state 33
    lvalue                         shift and go to state 34

state 166

    (30) case -> WHERE const COLON stmtlist .
    (27) stmtlist -> stmtlist . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RCB             reduce using rule 30 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 30 (case -> WHERE const COLON stmtlist .)
    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    const                          shift and go to state 33
    stmt                           shift and go to state 103
    exp                            shift and go to state 72
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 167

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 168

    (45) elseiflist -> elseiflist ELSEIF LRB exp . RRB stmt
    (48) exp -> exp . SUM exp
    (49) exp -> exp . SUB exp
    (50) exp -> exp . MUL exp
    (51) exp -> exp . DIV exp
    (52) exp -> exp . MOD exp
    (53) exp -> exp . GT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LE exp
    (56) exp -> exp . GE exp
    (57) exp -> exp . EQ exp
    (58) exp -> exp . NE exp

    RRB             shift and go to state 169
    SUM             shift and go to state 53
    SUB             shift and go to state 54
    MUL             shift and go to state 55
    DIV             shift and go to state 56
    MOD             shift and go to state 57
    GT              shift and go to state 58
    LT              shift and go to state 59
    LE              shift and go to state 60
    GE              shift and go to state 61
    EQ              shift and go to state 62
    NE              shift and go to state 63


state 169

    (45) elseiflist -> elseiflist ELSEIF LRB exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . PRINT LRB ID RRB SEMICOLON
    (43) stmt -> . IF LRB exp RRB stmt elseiflist
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (47) exp -> . assign
    (48) exp -> . exp SUM exp
    (49) exp -> . exp SUB exp
    (50) exp -> . exp MUL exp
    (51) exp -> . exp DIV exp
    (52) exp -> . exp MOD exp
    (53) exp -> . exp GT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LE exp
    (56) exp -> . exp GE exp
    (57) exp -> . exp EQ exp
    (58) exp -> . exp NE exp
    (59) exp -> . const
    (60) exp -> . lvalue
    (61) exp -> . ID LRB explist RRB
    (62) exp -> . LRB exp RRB
    (63) exp -> . ID LRB RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (24) block -> . LCB stmtlist RCB
    (25) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (66) assign -> . lvalue ASSIGN exp
    (69) const -> . INTEGERNUMBER
    (70) const -> . FLOATNUMBER
    (71) const -> . TRUE
    (72) const -> . FALSE
    (28) lvalue -> . ID
    (29) lvalue -> . ID LSB exp RSB
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . assign

    RETURN          shift and go to state 71
    WHILE           shift and go to state 75
    ON              shift and go to state 76
    FOR             shift and go to state 77
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    ID              shift and go to state 78
    LRB             shift and go to state 35
    SUB             shift and go to state 32
    NOT             shift and go to state 36
    LCB             shift and go to state 44
    INTEGERNUMBER   shift and go to state 37
    FLOATNUMBER     shift and go to state 38
    TRUE            shift and go to state 39
    FALSE           shift and go to state 40

    exp                            shift and go to state 72
    stmt                           shift and go to state 170
    block                          shift and go to state 73
    vardec                         shift and go to state 74
    assign                         shift and go to state 81
    const                          shift and go to state 33
    lvalue                         shift and go to state 34
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 170

    (45) elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 45 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)

